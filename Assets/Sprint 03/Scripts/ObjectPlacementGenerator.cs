using System.Collections;
using System.Collections.Generic;
using UnityEngine;

namespace CoffeeBytes.Week3
{
    public class ObjectPlacementGenerator : MonoBehaviour
    {
        [SerializeField] private GameObject[] trees;
        [SerializeField] private float radius = 1f;
        [SerializeField] private Vector2 regionSize = Vector2.one;
        [SerializeField] private int rejectionSamples = 30;
        [SerializeField] private float rayStartHeight = 100;
        [SerializeField] private bool withNoise = false;
        [SerializeField] private Terrain terrain;
        [SerializeField] private float density;

        private float rayDist;
        private List<Vector2> points;
        private MapGenerator mapGenerator;

        private void Awake()
        {
            mapGenerator = GetComponent<MapGenerator>();
        }

        public void GenerateTrees()
        {
            rayDist = rayStartHeight;
            //rayDist = rayStartHeight - mapGenerator.terrainData.waterHeight + 10f;
            Texture2D vegetationNoiseMap = Noise.GenerateVegetationTexture(50, 50, 5, 2, new Vector2(0, 0));
            points = PoissonDiscSampling.GeneratePoints(radius, regionSize, vegetationNoiseMap, withNoise, density, rejectionSamples);
            Debug.Log($"Amount of points generated by Poission = {points.Count}");
            foreach (Vector2 point in points)
            {
                RaycastHit hit;
                if (Physics.Raycast(new Vector3(point.x + transform.position.x, rayStartHeight, point.y + transform.position.y), Vector2.down, out hit, rayDist))
                {
                    if (hit.transform.tag != "Tree")
                    {
                        foreach (VegetationType type in mapGenerator.vegetationData.vegetationTypes)
                        {
                            Instantiate(type.prefabs[Random.Range(0, type.prefabs.Length - 1)], hit.point, Quaternion.identity, transform);
                        }
                        //Instantiate(vegetationData.vegetationTypes[0].prefabs[Random.Range(0, vegetationData.vegetationTypes[0].prefabs.Length -1)], hit.point, Quaternion.identity, this.transform);
                    }
                }
            }
        }
        /*public void PlaceObjects()
        {
            List<Vector3> spawnPoints = new List<Vector3>();

            Texture2D vegetationNoiseMap = Noise.GenerateVegetationTexture((int)terrain.terrainData.size.x, (int)terrain.terrainData.size.z, 5, 2, new Vector2(0, 0));

            Transform parent = new GameObject("PlacedObjects").transform;

            for (int x = 0; x < terrain.terrainData.size.x; x++)
            {
                for (int z = 0; z < terrain.terrainData.size.z; z++)
                {
                    float noiseMapValue = vegetationNoiseMap.GetPixel(x, z).g;

                    //Debug.Log(noiseMapValue);

                    if (noiseMapValue > 1 - radius)
                    {
                        Vector3 pos = new Vector3(x, 0, z);
                        pos.y = terrain.terrainData.GetInterpolatedHeight(x / terrain.terrainData.size.x, z / (float)terrain.terrainData.size.y);

                        GameObject go = Instantiate(mapGenerator.vegetationData.vegetationTypes[0].prefabs[Random.Range(0, mapGenerator.vegetationData.vegetationTypes[0].prefabs.Length - 1)], pos, Quaternion.identity, transform);
                        go.transform.SetParent(parent);
                    }
                }
            }
        }*/
    }
}