using System.Collections;
using System.Collections.Generic;
using UnityEngine;

namespace CoffeeBytes.Week3
{
    public class ObjectPlacementGenerator : MonoBehaviour
    {
        [SerializeField] private GameObject[] trees;
        [SerializeField] private float radius = 1f;
        [SerializeField] private Vector2 regionSize = Vector2.one;
        [SerializeField] private int rejectionSamples = 30;
        [SerializeField] private float rayStartHeight = 100;

        private float rayDist;
        private List<Vector2> points;
        private MapGenerator mapGenerator;

        private void Awake()
        {
            mapGenerator = GetComponent<MapGenerator>();
        }

        private void Start()
        {
            GenerateTrees();
        }

        public void GenerateTrees()
        {
            rayDist = rayStartHeight;
            //rayDist = rayStartHeight - mapGenerator.terrainData.waterHeight + 10f;
            Texture2D vegetationNoiseMap = Noise.GenerateVegetationTexture(100, 100, 40, 0.55f, 2, new Vector2(0, 0));
            points = PoissonDiscSampling.GeneratePoints(radius, regionSize, vegetationNoiseMap, rejectionSamples);
            Debug.Log($"Amount of points generated by Poission = {points.Count}");
            foreach (Vector2 point in points)
            {
                RaycastHit hit;
                if (Physics.Raycast(new Vector3(point.x + transform.position.x, rayStartHeight, point.y + transform.position.y), Vector2.down, out hit, rayDist))
                {
                    if (hit.transform.tag != "Tree")
                    {
                        foreach (VegetationType type in mapGenerator.vegetationData.vegetationTypes)
                        {
                            Instantiate(type.prefabs[Random.Range(0, type.prefabs.Length - 1)], hit.point, Quaternion.identity, transform);
                        }
                        //Instantiate(vegetationData.vegetationTypes[0].prefabs[Random.Range(0, vegetationData.vegetationTypes[0].prefabs.Length -1)], hit.point, Quaternion.identity, this.transform);
                    }
                }
            }
        }
    }
}